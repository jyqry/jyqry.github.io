{"version":3,"sources":["components/Button.jsx","components/Input.jsx","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","Input","input","Container","div","Sidebar","Bin","Result","Swallow","App","useState","count","name","prizes","setPrizes","swallows","setSwallows","setCount","picks","setPicks","totalCount","useEffect","total","map","console","log","reduce","acc","cur","toString","JSON","stringify","onChangePrize","prize","index","newPrizes","placeholder","onChange","e","target","value","parseInt","style","width","onClick","filter","prev","concat","Array","from","length","padding","marginBottom","borderBottom","picked","origin","randomIndex","array","parse","currentIndex","Math","floor","random","shuffle","splice","pick","findIndex","swallow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.597c2d06.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Button = styled.button``;\r\n\r\nexport default Button;\r\n","import styled from \"styled-components\";\r\n\r\nconst Input = styled.input``;\r\n\r\nexport default Input;\r\n","import \"./App.css\";\nimport { Button, Input } from \"./components\";\nimport styled from \"styled-components\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [prizes, setPrizes] = useState([\n    {\n      count: 0,\n      name: \"\",\n    },\n  ]);\n  const [swallows, setSwallows] = useState([]);\n  const [count, setCount] = useState(0);\n  const [picks, setPicks] = useState([]);\n\n  const totalCount = useEffect(() => {\n    const total = prizes\n      .map(({ count }) => {\n        if (typeof count !== \"number\") {\n          return 0;\n        }\n        console.log(typeof count === \"number\");\n        return count;\n      })\n      .reduce((acc, cur) => acc + cur, 0);\n    console.log(\"tota;\", total);\n    return total.toString();\n  }, [JSON.stringify(prizes)]);\n\n  const onChangePrize = (prize, index) => {\n    const newPrizes = [...prizes];\n    newPrizes[index] = prize;\n    setPrizes(newPrizes);\n  };\n\n  const onClickApply = () => {\n    setSwallows([]);\n    prizes\n      .filter((prize) => prize.count && prize.name)\n      .map((prize) =>\n        setSwallows((prev) =>\n          prev.concat(Array.from({ length: prize.count }, () => prize.name))\n        )\n      );\n  };\n\n  const shuffle = (origin) => {\n    const array = JSON.parse(JSON.stringify(origin));\n    let currentIndex = array.length,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  };\n\n  const onClickPick = () => {\n    const shuffledSwallows = shuffle(swallows);\n    const picked = shuffledSwallows.splice(0, count);\n    setPicks([...picks, ...picked]);\n    picked.map((pick) =>\n      swallows.splice(\n        swallows.findIndex((swallow) => pick === swallow),\n        1\n      )\n    );\n  };\n\n  return (\n    <Container>\n      <Sidebar>\n        {prizes.map((prize, index) => (\n          <div>\n            <Input\n              data-testid=\"prize\"\n              placeholder=\"상품이름\"\n              onChange={(e) =>\n                onChangePrize(\n                  { name: e.target.value, count: prize.count },\n                  index\n                )\n              }\n            />\n            <Input\n              data-testid=\"count\"\n              placeholder=\"개수\"\n              onChange={(e) =>\n                onChangePrize(\n                  { name: prize.name, count: parseInt(e.target.value, 10) },\n                  index\n                )\n              }\n              style={{ width: `30px` }}\n            />\n            <span>{totalCount}</span>\n          </div>\n        ))}\n        <Button\n          onClick={() => {\n            setPrizes([...prizes, {}]);\n          }}\n        >\n          + 상품 추가하기\n        </Button>\n\n        <Button onClick={onClickApply}>적용하기&gt;&gt;</Button>\n      </Sidebar>\n      <Bin data-testid=\"bin\">\n        <div\n          style={{\n            padding: \"10px\",\n            marginBottom: \"20px\",\n            borderBottom: `1px solid black`,\n          }}\n        >\n          <Input onChange={(e) => setCount(parseInt(e.target.value))} />개\n          <Button onClick={onClickPick}>추첨하기</Button> (총 {swallows.length}\n          개)\n        </div>\n        {swallows.map((swallow, index) => (\n          <Swallow key={index.toString()}>{swallow}</Swallow>\n        ))}\n      </Bin>\n      <Result>\n        <div>\n          <Button\n            onClick={() => {\n              setPicks([]);\n            }}\n          >\n            추첨목록 비우기\n          </Button>\n        </div>\n        {picks.map((pick, index) => (\n          <Swallow key={index.toString()}>\n            {index + 1}. {pick}\n          </Swallow>\n        ))}\n      </Result>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  min-height: 100vh;\n`;\nconst Sidebar = styled.div`\n  flex: 0 0 300px;\n  border-right: 1px solid black;\n`;\nconst Bin = styled.div`\n  flex: 1;\n`;\nconst Result = styled.div`\n  flex: 0 0 300px;\n  border-left: 1px solid black;\n`;\n\nconst Swallow = styled.div`\n  display: inline-flex;\n  border: 1px solid gray;\n  padding: 6px;\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}